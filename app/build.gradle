buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.2'
    }
}
apply plugin: 'com.android.application'

repositories {
        mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion "20.0.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode readVersionCode()
        versionName readVersionName()
        applicationId 'com.myapp'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        testLocal {
            /*storeFile file('')
            storePassword ''
            keyAlias ''
            keyPassword ''*/
        }
    }

    if (project.hasProperty('app.keystore')) {
        signingConfigs {
            release {
                //properties from command line or from gradle.properties
                storeFile file(project.getProperty('app.keystore'))
                storePassword project.getProperty('app.keystore.password')
                keyAlias project.getProperty('app.keystore.keyAlias')
                keyPassword project.getProperty('app.keystore.keyPassword')
            }
        }
    }

    buildTypes {
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    productFlavors {
        dev {
            //gradle plugin 0.13
            //applicationIdSuffix '.dev'
            applicationId 'com.myapp.dev'
            buildConfigField "boolean", "REPORT_CRASHES", "false"
        }
        testLocal {
            //applicationIdSuffix '.testlocal'
            applicationId 'com.myapp.testlocal'
            signingConfig signingConfigs.testLocal

            buildConfigField "boolean", "REPORT_CRASHES", "true"
        }
        prod {
            if (project.hasProperty('app.keystore')) {
                signingConfig signingConfigs.release
            }

            buildConfigField "boolean", "REPORT_CRASHES", "true"
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

def _writeToFile(File file, Object value) {
    file.write(String.valueOf(value))
}

def getVersionCodeFile() {
    return file('../versionCode.txt')
}

def readVersionCode() {
    return Integer.parseInt(getVersionCodeFile().getText().trim())
}

task('increaseVersionCode') << {
    _writeToFile(getVersionCodeFile(), readVersionCode() + 1)
}

def getVersionNameFile() {
    return file('../versionName.txt')
}

//version name is stored as major.minor.patch.build
def readVersionName() {
    return getVersionNameFile().getText().trim()
}

task('incrementVersionName') << {
    def currentVersion = readVersionName()
    def parts = currentVersion.split('.')
    def major = Integer.parseInt(parts[0])
    def minor = Integer.parseInt(parts[1])
    def patch = Integer.parseInt(parts[2])
    def build = Integer.parseInt(parts[3])
    _writeToFile(String.format("%d.%d.%d.%d", major, minor, patch, build + 1))
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateProdReleaseBuildConfig') {
        task.dependsOn 'increaseVersionCode'
    }
    if (task.name == 'generateTestLocalReleaseBuildConfig' || task.name == 'generateProdReleaseBuildConfig') {
        task.dependsOn 'increaseVersionName'
    }
}
